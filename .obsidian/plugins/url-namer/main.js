/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UrlNamer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UrlNamer = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.modal = new MsgModal(this.app);
  }
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "url-namer-selection",
        name: "Name the URL links in the selected text",
        editorCallback: (editor, view) => {
          const loadingIndicator = new import_obsidian.Notice("Fetching titles for selected text...", 0);
          UrlTagger.getTaggedText(editor.getSelection()).then((taggedText) => {
            editor.replaceSelection(taggedText);
            loadingIndicator.hide();
          }).catch((e) => this.modal.showMsg(e.message));
        }
      });
    });
  }
};
var MsgModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  showMsg(theMsg) {
    this.msg = theMsg;
    this.open();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.msg);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var _UrlTagger = class {
  static getTaggedText(selectedText) {
    return __async(this, null, function* () {
      const promises = [];
      selectedText.replace(_UrlTagger.rawUrlPattern, (match) => {
        const promise = UrlTitleFetcher.getNamedUrlTag(match);
        promises.push(promise);
        return match;
      });
      const namedTags = yield Promise.all(promises);
      new import_obsidian.Notice(`Processed ${namedTags.length} urls.`);
      return selectedText.replace(_UrlTagger.rawUrlPattern, () => namedTags.shift());
    });
  }
};
var UrlTagger = _UrlTagger;
UrlTagger.rawUrlPattern = new RegExp("(?<!\\]\\(\\s*)(?<=\\s|\\(|\\[|^)(?:https?:\\/\\/)?[a-zA-Z0-9]+[a-zA-Z0-9\\-_.]*\\.[a-z]{2,6}[^\\s]*\\b", "gim");
var UrlTitleFetcher = class {
  static isValidUrl(s) {
    try {
      new URL(s);
      return true;
    } catch (err) {
      return false;
    }
  }
  static parseTitle(url, body) {
    let match = url.includes("mp.weixin.qq.com") ? body.match(this.wxTitlePattern) : body.match(this.htmlTitlePattern);
    if (!match || typeof match[1] !== "string") {
      throw new Error("Unable to parse the title tag");
    }
    return match[1];
  }
  static getNamedUrlTag(url) {
    return __async(this, null, function* () {
      const reqUrl = url.startsWith("http") ? url : `http://${url}`;
      if (!this.isValidUrl(reqUrl)) {
        new import_obsidian.Notice(`${url} is not a valid URL.`);
        return url;
      }
      try {
        const res = yield (0, import_obsidian.requestUrl)({ url: reqUrl });
        if (res.status != 200) {
          throw new Error(`status code ${res.status}`);
        }
        const body = res.text;
        const title = this.parseTitle(url, body);
        return `[${title}](${url})`;
      } catch (error) {
        new import_obsidian.Notice(`Error handling URL ${url}: ${error}`);
        return url;
      }
    });
  }
};
UrlTitleFetcher.htmlTitlePattern = /<title>([^<]*)<\/title>/im;
UrlTitleFetcher.wxTitlePattern = /<meta property="og:title" content="([^<]*)" \/>/im;
